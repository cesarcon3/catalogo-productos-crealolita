---
import MainImage from './MainImage.astro';
import ThumbnailGrid from './ThumbnailGrid.astro';
import ImageModal from './ImageModal.astro';
import type { ImageMetadata } from 'astro';
import type { ProductGalleryProps } from '../../types/types';

const { productId, images, productName } = Astro.props as ProductGalleryProps;

// Interfaz para los datos de imagen
interface ImageData {
  src: ImageMetadata;
  name: string;
  alt: string;
}

// Función para importar todas las imágenes del producto con mejor manejo de errores
const imageImports: ImageData[] = [];

if (Array.isArray(images) && images.length > 0) {
  // Obtenemos todos los módulos de imagen disponibles
  const imageModules = import.meta.glob('/src/content/productos/*/*.{png,jpg,jpeg,webp,avif}', { eager: false });
  
  for (const imageName of images) {
    if (!imageName || typeof imageName !== 'string') {
      console.warn(`Nombre de imagen inválido:`, imageName);
      continue;
    }

    try {
      // Construimos la ruta de la imagen
      const imagePath = `/src/content/productos/${productId}/${imageName}`;
      
      // Verificamos si el módulo existe antes de importarlo
      if (imageModules[imagePath]) {
        const imageModule = await imageModules[imagePath]() as { default: ImageMetadata };
        
        // Validamos que el módulo tenga la estructura correcta
        if (imageModule?.default && typeof imageModule.default === 'object') {
          imageImports.push({
            src: imageModule.default,
            name: imageName,
            alt: `${productName} - ${imageName.replace(/\.[^/.]+$/, '')}`
          });
        } else {
          console.warn(`Módulo de imagen con estructura inválida: ${imagePath}`);
        }
      } else {
        console.warn(`Imagen no encontrada: ${imagePath}`);
        // Intentamos con diferentes extensiones si la original no funciona
        const baseName = imageName.replace(/\.[^/.]+$/, '');
        const extensions = ['jpg', 'jpeg', 'png', 'webp', 'avif'];
        
        let found = false;
        for (const ext of extensions) {
          const altPath = `/src/content/productos/${productId}/${baseName}.${ext}`;
          if (imageModules[altPath]) {
            try {
              const altImageModule = await imageModules[altPath]() as { default: ImageMetadata };
              if (altImageModule?.default) {
                imageImports.push({
                  src: altImageModule.default,
                  name: `${baseName}.${ext}`,
                  alt: `${productName} - ${baseName}`
                });
                found = true;
                break;
              }
            } catch (altError) {
              console.warn(`Error cargando imagen alternativa ${altPath}:`, altError);
            }
          }
        }
        
        if (!found) {
          console.warn(`No se pudo encontrar la imagen con ninguna extensión: ${baseName}`);
        }
      }
    } catch (error) {
      console.error(`Error procesando imagen ${imageName}:`, error);
    }
  }
}

// Log para debugging
if (imageImports.length === 0) {
  console.warn(`No se pudieron cargar imágenes para el producto: ${productId}`);
  console.warn(`Imágenes solicitadas:`, images);
}
---

<div class="gallery-container" data-product-gallery>
  <MainImage 
    images={imageImports}
    productName={productName}
  />
  
  <ThumbnailGrid 
    images={imageImports}
    productName={productName}
  />
  
  <ImageModal />
</div>

<style>
  .gallery-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  @media (max-width: 768px) {
    .gallery-container {
      gap: 0.75rem;
    }
  }
</style>

<script>
  import('./gallery-controller.ts');
</script>